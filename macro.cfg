#####################################################################
#                           自定義 Macro
[gcode_macro G32]
description:
gcode:
    BED_MESH_CLEAR                          # 卸載網床
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28                                 # 歸位所有軸
    {% endif %}
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL                       # 龍門架調平
    STATUS_CALIBRATING_Z
    # CALIBRATE_Z                             # Z偏移校正

    G0 X150 Y150 Z30 F10000
    STATUS_READY

[gcode_macro M141]
description: Set Chamber Temperature
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}

[gcode_macro MESH_LOAD]
description: Mesh Load
gcode:
    BED_MESH_PROFILE LOAD=default

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set X = params.X|default(150) %} # edit to your park position
    {% set Y = params.Y|default(300) %} # edit to your park position
    {% set Z = params.Z|default(5) %} # edit to your park position
    {% set E = params.E|default(1) %} # edit to your retract length
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{Z} F6000
    SAVE_GCODE_STATE NAME=PAUSE_above_state
    G90
    G1 X{X} Y{Y} F6000
    STATUS_READY

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300                                      # beep
    G91
    G92 E0
    G1 E350 F{max_velocity}                   # fast-load
    G1 E25 F{speed}                           # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300                                      # beep
    G92 E0
    G1 E25 F{speed}                           # purge
    G1 E-420 F{max_velocity}                  # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro PURGE_LINE]                           # [測試線]
gcode:
  SET_DISPLAY_TEXT MSG="Purge Line"                # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode

  SET_NOZZLE_LEDS_ON
  G0 X100 Y4 F10000                                # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 

  G1 X100 E20 F1000                                # Purge line 1
  G0 Y0.4                                          # Move Y
  G1 X-100 E20 F1000                               # Purge line 2

  G90                                              # Absolut position

[gcode_macro PRINT_START]
gcode:
  STATUS_READY
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_bed = params.BED|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"   # Displays info
    M106 S255                                           # Turns on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M140 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"           # Displays info

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M140 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    #G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  STATUS_HEATING                               # Sets SB-leds to heating-mode
  SET_DISPLAY_TEXT MSG="Heating Hotend: 150c"  # Displays info
  M104 S150                                    # set temporary nozzle temp to prevent oozing during homing

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING          # Sets SB-leds to homing-mode
  G28                  # Full home (XYZ)
  #G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  ##  Uncomment if you have a Nevermore.
  #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  #STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  #quad_gantry_level               # Levels the buildplate via QGL
  #G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  #SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  #bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  SET_DISPLAY_TEXT MSG="Heating Hotend: {target_extruder}c"     # Displays info
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  SET_DISPLAY_TEXT MSG="Waiting Bed: {target_bed}c"
  M190 S{target_bed}                                            # Wait ber temp stabilize
  SET_DISPLAY_TEXT MSG="Waiting Hotend: {target_extruder}c"
  M109 S{target_extruder}                                       # Wait nozzle temp stabilize

  BEEP_START
  SET_DISPLAY_TEXT MSG="Purging Nozzle"
  PURGE_LINE

  # Gets ready to print
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  SET_DISPLAY_TEXT MSG="Print Start"               # Displays info
  SET_NOZZLE_LEDS_ON


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                             # 等待缓冲区清除
    SET_DISPLAY_TEXT MSG="Print Ending"
    BEEP_END
    G92 E0                           # 将挤出机归零
    G1 E-1.0 F3600                   # 缩回耗材丝
    G91                              # 相对定位
    G0 Z1.00 X20.0 Y20.0 F20000      # 移动喷嘴以移除架线
    TURN_OFF_HEATERS                 # 关闭热端
    M107                             # 关闭风扇
    G1 Z20 F3000                     # 将喷嘴向上移动20毫米
    G90                              # 绝对定位
    G0  X150 Y300 F3600              # 将喷嘴停在后部
    BED_MESH_CLEAR                  # 卸载网床
    STATUS_OFF

[gcode_macro CLEAN_NOZZLE]
gcode:
    STATUS_CLEANING
    {% if "xyz" in printer.toolhead.homed_axes %}
      {% if printer.extruder.temperature >= 200 %}
        Dock_Probe
        M117 Cleaning nozzle
        G91
        G0 Z10 F10000
        SAVE_GCODE_STATE NAME=clean_nozzle
          G90
          G0 X200 Y305 F10000
          SAVE_GCODE_STATE NAME=clean_nozzle_above
            G0 Z1.4 F10000
            G0 X250 F10000
            G0 Y304 X200
            G0 Y305 X250
            G0 Y304 X200
            G0 Y305 X250
            G0 Y304 X200
            G0 Y304 X250
            G0 Y305 X200
            G0 Y304 X250
            G0 Y303 X200
            G0 Y303 X250
            G0 Y304 X200
            G0 Y303 X250
            G0 Y304 X200
            G0 Y305 X250
            G0 Y303 X200
            G0 Y305 X250
          RESTORE_GCODE_STATE NAME=clean_nozzle_above MOVE=1
          M117 Cleaned!
        RESTORE_GCODE_STATE NAME=clean_nozzle MOVE=1
        G91
        G0 Z-10 F10000
	G90
      {% endif %} 
    {% else %}
      { action_raise_error("Please home your axes!") }
      M117 Please home first!
    {% endif %}

[gcode_macro PRIME_NOZZLE]
gcode:
    {% set E = params.E|default(0.5) %} # retract size
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error("Please home your axes!") }
      M117 Please home first!
    {% else %}
      {% if not printer.extruder.temperature >= 200 %}
        { action_raise_error("Heat up nozzle first!") }
        M117 Heat up nozzle first!
      {% else %}
        {% if printer["gcode_macro PRINT_START_VARS"].tool == -1 and printer["filament_switch_sensor toolhead_sensor"].enabled and not printer["filament_switch_sensor toolhead_sensor"].filament_detected %}
          G90
          G0 X200 Y305 F10000
          INJECT_FILAMENT
          #CLEAN_NOZZLE
        {% endif %}
      {% endif %}
   {% endif %}

[gcode_macro REMOVE_FILAMENT]
gcode:
    M117 Removing filament
    ERCF_FORM_TIP_STANDALONE USE_SKINNYDIP=1 SKINNYDIP_DISTANCE=31 COOLING_TUBE_LENGTH=10 COOLING_TUBE_RETRACTION=35
    G91
    G92 E0
    G1 E-40 F3000
    SET_PRESSURE_ADVANCE ADVANCE=0.032

[gcode_macro INJECT_FILAMENT]
gcode:
    {% set E = params.E|default(62) %}
    M117 Injecting filament
    G91
    G1 E{E} F2100
    G90

[gcode_macro SHUTDOWN]
description: Shutdown
gcode:
    RUN_SHELL_COMMAND CMD=shutdown

# ignore m150 commands
#[gcode_macro M150] #Set RGB(W) Color
#gcode:

[gcode_macro M191]
description: Wait for Chamber Temperature
gcode:
    {% set S = params.S|default(0) %}
    {% set R = params.R|default(120) %}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={S} MAXIMUM={R}

[gcode_macro BURNIN_TIP]
gcode:
    {% set TOOL = params.TOOL|default(0) %}
    {% for iteration in range(ITERATIONS|default(100)|int) %}
      M117 Burn-in iteration {iteration}
      ERCF_EJECT
      T{range(printer["gcode_macro ERCF_VAR"].colorselector|length) | random}}
      G91
      G92 E0
      G1 E10 F600
    {% endfor %}

[gcode_macro CALIBRATING_Z]
gcode:
    STATUS_CALIBRATING_Z
    PROBE_CALIBRATE
    STATUS_READY
# Use:
#   - DUMP_WARNINGS
[gcode_macro CHAMBER_LIGHT]
gcode:
  {% set brightness = printer["neopixel chamber_light"].color_data[0][1] %}
  {% if brightness == 0 %}
    _CHAMBER_LIGHT_ON
  {% else %}
    _CHAMBER_LIGHT_OFF
  {% endif %}

[gcode_macro LOGO_LED]
gcode:
  {% set logo_led_status = params.LOGO_LED|default(0) %}
  {% if logo_led_status == 0 %}
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    {% set logo_led_status = 1 %}
  {% else %}
    set_logo_leds_off transmit=0
    {% set logo_led_status = 0 %}
  {% endif %}

[gcode_macro NOZZLE_LED]
gcode:
  {% set brightness = printer["neopixel sb_leds"].color_data[1][1] %}
  {% if brightness == 0 %}
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1
  {% else %}
    set_nozzle_leds_off
  {% endif %}

#[gcode_macro TEST]
#description: TEST
#gcode:
#  M117 {% printer["neopixel sb_leds"].color_data[0][1] %}

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if not printer.configfile.warnings %}
    {action_respond_info("klipper too old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}

[gcode_macro CHECK_QGL]
description: Run after QUAD_GANTRY_LEVEL to insure it passes
gcode:
  {% set user        = printer['gcode_macro _USER_VARIABLE'] %}
  {% set probe_state = printer['gcode_macro _MAG_PROBE'].state|default('unknown')|lower %} ; get probe state
  {% set probe_ok    = False if user.hw.mag_probe.ena and (probe_state == 'error' or probe_state == 'unknown')
                  else True %}  
  {% if not printer.quad_gantry_level.applied or not probe_ok %} ; check QGL and probe status
    {action_respond_info("QGL CHECK: Fail therefore cancel the print")}
    PAUSE_BASE
    G90
    G0 Z{user.z_hop} F{user.speed.z_hop}                                 ; move nozzle to z high first
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
    {% if user.hw.mag_probe.ena %} DETACH_PROBE {% endif %}
    CANCEL_PRINT PARK=1 ERROR=1
  {% else %}
    {action_respond_info("QGL CHECK: Pass")}
  {% endif %}